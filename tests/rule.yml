---

- name: Testing Rules - basics
  hosts: localhost
  gather_facts: no
  module_defaults:
    ansibleguy.opnsense.rule:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false
      match_fields: ['description']

  tasks:
    - name: Deleting - does not exist
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'
        state: 'absent'
        description: 'ANSIBLE_TEST_1_1'
      register: opn1
      failed_when: >
        opn1.failed or
        opn1.changed

    - name: Creating
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_1'

    - name: Updating - nothing changed
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_1'
      register: opn2
      failed_when: >
        opn2.failed or
        opn2.changed
      when: not ansible_check_mode

    - name: Updating
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.2.0/24'
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_1'
      register: opn3
      failed_when: >
        opn3.failed or
        not opn3.changed
      when: not ansible_check_mode

    - name: Updating more
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.2.0/24'
        destination_port: 8443
        protocol: 'UDP'
        description: 'ANSIBLE_TEST_1_1'
        interface: ['lan']  #  note: 'lo0' not accepted :(
        log: false
      register: opn4
      failed_when: >
        opn4.failed or
        not opn4.changed
      when: not ansible_check_mode

    - name: Creating IPv6
      ansibleguy.opnsense.rule:
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_10'
        ip_protocol: 'inet6'
      register: opn17
      failed_when: >
        opn17.failed or
        not opn17.changed

    - name: Updating IPv4
      ansibleguy.opnsense.rule:
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_10'
      register: opn18
      failed_when: >
        opn18.failed or
        not opn18.changed
      when: not ansible_check_mode

    - name: Triggering server-side validation error for interfaces
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.2.0/24'
        destination_port: 443
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_11'
        interface: ['lan', 'does_not_exist']
      register: opn19
      failed_when: not opn19.failed
      when: not ansible_check_mode

    - name: Triggering server-side validation error for ports
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.2.0/24'
        destination_port: 'XYZ'
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_11'
      register: opn20
      failed_when: not opn20.failed
      when: not ansible_check_mode

    - name: Creating block rule
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        destination_invert: true
        destination_net: '10.0.0.0/8'
        description: 'ANSIBLE_TEST_1_2'
        action: 'block'

    - name: Test port-range
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.2.0/24'
        destination_port: '50000-51000'
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_12'

    - name: Cleanup
      ansibleguy.opnsense.rule:
        description: "{{ item }}"
        state: 'absent'
      diff: false
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
        - 'ANSIBLE_TEST_1_10'
        - 'ANSIBLE_TEST_1_11'
        - 'ANSIBLE_TEST_1_12'

- name: Testing Rules - aliases
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.rule:
      match_fields: ['description']

  tasks:
    - name: Adding alias
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_3_1'
        type: 'urltable'
        content: 'https://www.spamhaus.org/drop/drop.txt'

    - name: Adding port alias
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_3_2'
        type: 'port'
        content: 80

    - name: Adding rule using alias-destination
      ansibleguy.opnsense.rule:
        destination_invert: true
        destination_net: 'ANSIBLE_TEST_3_1'
        description: 'ANSIBLE_TEST_1_3'
        action: 'block'

    - name: Adding rule using alias-port
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        destination_net: '192.168.1.0/24'
        destination_port: 'ANSIBLE_TEST_3_2'
        protocol: 'TCP'
        description: 'ANSIBLE_TEST_1_4'

    - name: Cleanup rules
      ansibleguy.opnsense.rule:
        description: "{{ item }}"
        state: 'absent'
      diff: false
      loop:
        - 'ANSIBLE_TEST_1_3'
        - 'ANSIBLE_TEST_1_4'

    - name: Cleanup aliases
      ansibleguy.opnsense.alias:
        name: "{{ item }}"
        state: 'absent'
      diff: false
      loop:
        - 'ANSIBLE_TEST_3_1'
        - 'ANSIBLE_TEST_3_2'

- name: Testing Rules - listing
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.list:
      target: 'rule'

    ansibleguy.opnsense.rule:
      match_fields: ['description']

  tasks:
    - name: Listing rules (none)
      ansibleguy.opnsense.list:
      register: opn7
      failed_when: >
        'data' not in opn7 or
        opn7.data | length != 0

    - name: Creating dummy rule
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        destination_invert: true
        destination_net: '10.0.0.0/8'
        description: 'ANSIBLE_TEST_1_5'
        action: 'block'
      when: not ansible_check_mode

    - name: Listing rules
      ansibleguy.opnsense.list:
      register: opn8
      failed_when: >
        'data' not in opn8 or
        opn8.data | length != 1
      when: not ansible_check_mode

    - name: Modifying dummy rule 1 by uuid
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        destination_invert: true
        destination_net: '10.1.0.0/8'
        description: 'ANSIBLE_TEST_1_5'
        action: 'block'
        match_fields: ['uuid']
        uuid: "{{ opn8.data[0]['uuid'] }}"
      when: not ansible_check_mode

    - name: Creating dummy rule 2
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        destination_invert: true
        destination_net: '10.0.0.0/8'
        description: 'ANSIBLE_TEST_1_8'
        enabled: false
        action: 'block'
      when: not ansible_check_mode

    - name: Cleanup
      ansibleguy.opnsense.rule:
        description: "{{ item }}"
        state: 'absent'
      diff: false
      loop:
        - 'ANSIBLE_TEST_1_5'
        - 'ANSIBLE_TEST_1_8'

    - name: Checking cleanup
      ansibleguy.opnsense.list:
      register: opn14
      failed_when: >
        'data' not in opn14 or
        opn14.data | length != 0

- name: Testing Rules - matching
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.list:
      target: 'rule'

    ansibleguy.opnsense.rule:
      match_fields: ['source_net', 'description']

  tasks:
    - name: Listing rules - before
      ansibleguy.opnsense.list:
      register: opn10
      failed_when: >
        'data' not in opn10 or
        opn10.data | length != 0
      when: not ansible_check_mode

    - name: Creating rule 1
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        description: 'ANSIBLE_TEST_1_6'

        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'

    - name: Modifying rule 1
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        description: 'ANSIBLE_TEST_1_6'

        destination_net: '192.168.10.0/24'
        destination_port: 443
        protocol: 'TCP'
      register: opn6
      failed_when: >
        opn6.failed or
        not opn6.changed
      when: not ansible_check_mode

    - name: Creating rule 2
      ansibleguy.opnsense.rule:
        source_net: '192.168.0.0/24'
        description: 'ANSIBLE_TEST_1_7'

        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'

    - name: Creating rule 3
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        description: 'ANSIBLE_TEST_1_7'

        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'TCP'

    - name: Modifying rule 3
      ansibleguy.opnsense.rule:
        source_net: '192.168.1.0/24'
        description: 'ANSIBLE_TEST_1_7'

        destination_net: '192.168.1.0/24'
        destination_port: 443
        protocol: 'UDP'
      when: not ansible_check_mode

    - name: Listing rules - after
      ansibleguy.opnsense.list:
      register: opn11
      failed_when: >
        'data' not in opn11 or
        opn11.data | length != 3
      when: not ansible_check_mode

    - name: Cleanup
      ansibleguy.opnsense.rule:
        description: "{{ item }}"
        state: 'absent'
        match_fields: ['description']
      diff: false
      loop:
        - 'ANSIBLE_TEST_1_6'
        - 'ANSIBLE_TEST_1_7'
        - 'ANSIBLE_TEST_1_7'

    - name: Checking cleanup
      ansibleguy.opnsense.list:
      register: opn15
      failed_when: >
        'data' not in opn15 or
        opn15.data | length != 0

- name: Testing Rules - alias deletion if in use
  # this is to fix lacking server-side checks for the automation-rules
  # see: https://forum.opnsense.org/index.php?topic=30077.msg145259#msg145259
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.rule:
      match_fields: ['description']

    ansibleguy.opnsense.list:
      target: 'rule'

  tasks:
    - name: Creating alias
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_3_3'
        content: '192.168.0.1'
      when: not ansible_check_mode

    - name: Creating rule
      ansibleguy.opnsense.rule:
        source_net: 'ANSIBLE_TEST_3_3'
        description: 'ANSIBLE_TEST_1_9'
        protocol: 'TCP'
      when: not ansible_check_mode

    - name: Deleting alias - should fail
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_3_3'
        state: 'absent'
      register: opn13
      failed_when: not opn13.failed
      when: not ansible_check_mode

    - name: Cleanup rule
      ansibleguy.opnsense.rule:
        description: 'ANSIBLE_TEST_1_9'
        state: 'absent'
      diff: false
      when: not ansible_check_mode

    - name: Cleanup alias
      ansibleguy.opnsense.alias:
        name: 'ANSIBLE_TEST_3_3'
        state: 'absent'
      diff: false
      when: not ansible_check_mode

    - name: Checking cleanup
      ansibleguy.opnsense.list:
      register: opn16
      failed_when: >
        'data' not in opn16 or
        opn16.data | length != 0
