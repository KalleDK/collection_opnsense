---

- name: Testing VLAN interfaces
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.list:
      target: 'interface_vlan'

  tasks:
    - name: Listing
      ansibleguy.opnsense.list:
      register: opn_pre1
      failed_when: >
        'data' not in opn_pre1 or
        opn_pre1.data | length != 0

    - name: Removing - does not exist
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_1'
        state: 'absent'
      register: opn_pre2
      failed_when: >
        opn_pre2.failed or
        opn_pre2.changed

    - name: Adding 1 - failing because of invalid interface (server-side)
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_1'
        interface: 'lan'
        vlan: 100
      register: opn_fail1
      failed_when: not opn_fail1.failed
      when: not ansible_check_mode

    - name: Adding 1 - failing because of missing interface
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_1'
        vlan: 100
      register: opn_fail2
      failed_when: not opn_fail2.failed

    - name: Adding 1 - failing because of invalid vlan-id
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_1'
        interface: 'vtnet0'
        vlan: 4100
      register: opn_fail4
      failed_when: not opn_fail4.failed

    - name: Adding 1
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_1'
        interface: 'vtnet0'
        vlan: 100
      register: opn1
      failed_when: >
        opn1.failed or
        not opn1.changed

    - name: Adding 2 - failing because of duplicate vlan-id (server-side)
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 100
      register: opn_fail5
      failed_when: not opn_fail5.failed
      when: not ansible_check_mode

    - name: Adding 2 - failing because of invalid device-name (server-side)
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 100
        device: 'vlan100'
      register: opn_fail5
      failed_when: not opn_fail5.failed
      when: not ansible_check_mode

    - name: Adding 2 - failing because of duplicate device-name (server-side)
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 100
        device: 'vlan0.100'
      register: opn_fail5
      failed_when: not opn_fail5.failed
      when: not ansible_check_mode

    - name: Adding 2
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 101
        priority: 5
        device: 'vlan0.101'
      register: opn5
      failed_when: >
        opn5.failed or
        not opn5.changed

    - name: Adding 2 - nothing changed
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 101
        priority: 5
        device: 'vlan0.101'
      register: opn6
      failed_when: >
        opn6.failed or
        opn6.changed
      when: not ansible_check_mode

    - name: Removing 2
      ansibleguy.opnsense.interface_vlan:
        description: 'ANSIBLE_TEST_1_2'
        interface: 'vtnet0'
        vlan: 101
        priority: 5
        device: 'vlan0.101'
        state: 'absent'
      register: opn7
      failed_when: >
        opn7.failed or
        not opn7.changed
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn8
      failed_when: >
        'data' not in opn8 or
        opn8.data | length != 1
      when: not ansible_check_mode

    - name: Cleanup
      ansibleguy.opnsense.interface_vlan:
        description: "{{ item }}"
        state: 'absent'
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn_clean1
      failed_when: >
        'data' not in opn_clean1 or
        opn_clean1.data | length != 0
      when: not ansible_check_mode
