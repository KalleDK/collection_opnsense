---

- name: Testing VXLAN interfaces
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.list:
      target: 'interface_vxlan'

  tasks:
    - name: Listing
      ansibleguy.opnsense.list:
      register: opn_pre1
      failed_when: >
        'data' not in opn_pre1 or
        opn_pre1.data | length != 0

    - name: Removing - does not exist
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        state: 'absent'
      register: opn_pre2
      failed_when: >
        opn_pre2.failed or
        opn_pre2.changed

    - name: Adding 1 - failing because of invalid interface (server-side)
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        interface: 'invalid'
      register: opn_fail1
      failed_when: not opn_fail1.failed
      when: not ansible_check_mode

    - name: Adding 1 - failing because of missing local-ip
      ansibleguy.opnsense.interface_vxlan:
        id: 100
      register: opn_fail2
      failed_when: not opn_fail2.failed

    - name: Adding 1 - failing because of invalid local-ip
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1000'
        interface: 'lan'
      register: opn_fail4
      failed_when: not opn_fail4.failed

    - name: Adding 1 - failing because of invalid remote-ip
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        remote: '192.168.1.1000'
        interface: 'lan'
      register: opn_fail5
      failed_when: not opn_fail5.failed

    - name: Adding 1 - failing because of invalid group-ip
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        group: '192.168.1.1000'
        interface: 'lan'
      register: opn_fail6
      failed_when: not opn_fail6.failed

    - name: Adding 1 - failing because of missing remote-address/mc-group (server-side)
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        interface: 'lan'
      register: opn_fail7
      failed_when: not opn_fail7.failed
      when: not ansible_check_mode

    - name: Adding 1 - failing because interface & remote-address are set (server-side)
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        remote: '192.168.2.1'
        interface: 'lan'
      register: opn_fail8
      failed_when: not opn_fail8.failed
      when: not ansible_check_mode

    - name: Adding 1
      ansibleguy.opnsense.interface_vxlan:
        id: 100
        local: '192.168.0.1'
        remote: '192.168.2.1'
      register: opn1
      failed_when: >
        opn1.failed or
        not opn1.changed

    - name: Adding 2
      ansibleguy.opnsense.interface_vxlan:
        id: 101
        local: '192.168.1.1'
        group: '192.168.3.1'
        interface: 'lan'
      register: opn5
      failed_when: >
        opn5.failed or
        not opn5.changed

    - name: Adding 2 - nothing changed
      ansibleguy.opnsense.interface_vxlan:
        id: 101
        local: '192.168.1.1'
        group: '192.168.3.1'
        interface: 'lan'
      register: opn6
      diff: true
      when: not ansible_check_mode

    - name: Removing 2
      ansibleguy.opnsense.interface_vxlan:
        id: 101
        local: '192.168.1.1'
        group: '192.168.3.1'
        interface: 'lan'
        state: 'absent'
      register: opn7
      failed_when: >
        opn7.failed or
        not opn7.changed
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn8
      failed_when: >
        'data' not in opn8 or
        opn8.data | length != 1
      when: not ansible_check_mode

    - name: Cleanup
      ansibleguy.opnsense.interface_vxlan:
        id: "{{ item }}"
        state: 'absent'
      loop:
        - 100
        - 101
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn_clean1
      failed_when: >
        'data' not in opn_clean1 or
        opn_clean1.data | length != 0
      when: not ansible_check_mode
