---

- name: Testing Packages
  hosts: localhost
  gather_facts: no
  module_defaults:
    group/ansibleguy.opnsense.all:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.package:
      timeout: 120

    ansibleguy.opnsense.list:
      target: 'package'

  vars:
    test_app1: 'os-hw-probe'
    test_app2: 'os-dmidecode'

  tasks:
    - name: Listing
      ansibleguy.opnsense.list:
      register: opn10
      failed_when: "'data' not in opn10"

    - name: Installing - exists
      ansibleguy.opnsense.package:
        name: 'os-squid'
        action: 'install'
      register: opn1
      failed_when: >
        opn1.failed or
        opn1.changed

    - name: Removing - does not exist
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'remove'
      register: opn2
      failed_when: >
        opn2.failed or
        opn2.changed

    - name: Installing
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'install'
      register: opn3
      failed_when: >
        opn3.failed or
        not opn3.changed

    - name: Installing multiple
      ansibleguy.opnsense.package:
        name: ["{{ test_app1 }}", "{{ test_app2 }}"]
        action: 'install'
      register: opn9
      failed_when: >
        opn9.failed or
        not opn9.changed

    - name: Checking if installed
      ansibleguy.opnsense.list:
      register: opn12
      failed_when: >
        opn12.failed or
        test_app1 not in opn12 | json_query('data[*].name') or
        test_app2 not in opn12 | json_query('data[*].name')
      when: not ansible_check_mode

    - name: Locking
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'lock'
      register: opn4
      failed_when: >
        opn4.failed or
        not opn4.changed
      when: not ansible_check_mode

    - name: Removing - locked
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'remove'
      register: opn5
      failed_when: not opn5.failed
      when: not ansible_check_mode

    - name: Unlocking
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'unlock'
      register: opn6
      failed_when: >
        opn6.failed or
        not opn6.changed
      when: not ansible_check_mode

    - name: Reinstall
      ansibleguy.opnsense.package:
        name: "{{ test_app1 }}"
        action: 'reinstall'
      register: opn7
      failed_when: >
        opn7.failed or
        not opn7.changed
      when: not ansible_check_mode

    - name: Removing multiple
      ansibleguy.opnsense.package:
        name: ["{{ test_app1 }}", "{{ test_app2 }}"]
        action: 'remove'
      register: opn8
      failed_when: >
        opn8.failed or
        not opn8.changed
      when: not ansible_check_mode

    - name: Checking if removed
      ansibleguy.opnsense.list:
      register: opn11
      failed_when: >
        opn11.failed or
        test_app1 in opn11 | json_query('data[*].name') or
        test_app2 in opn11 | json_query('data[*].name')
      when: not ansible_check_mode
