---

- name: Testing WireGuard peers
  hosts: localhost
  gather_facts: no
  module_defaults:
    ansibleguy.opnsense.wireguard_peer:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false

    ansibleguy.opnsense.list:
      firewall: "{{ lookup('ansible.builtin.env', 'TEST_FIREWALL') }}"
      api_credential_file: "{{ lookup('ansible.builtin.env', 'TEST_API_KEY') }}"
      ssl_verify: false
      target: 'wireguard_peer'

  vars:
    test:
      pub1: 'Imk0UJX1clYYXKaDW9OdLE6J2N+X6aJ+/MxSlsDLW04='
      pub2: '7APwSdbet/8RQo7MyU95KdOPJ8YPD1ZaOh6LHNO5Cgw='
      psk: 'Jvhlj0xw67SF0e1n/xdpzqGskUH0trTAmNhDbpUodRI='

  tasks:
    - name: Listing
      ansibleguy.opnsense.list:
      register: opn10
      failed_when: >
        'data' not in opn10 or
        opn10.data | length != 0

    - name: Removing - does not exist
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        state: 'absent'
      register: opn1
      failed_when: >
        opn1.failed or
        opn1.changed

    - name: Adding 1 - failing because of invalid allowed-ip
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        public_key: "{{ test.pub1 }}"
        allowed_ips: ['192.168.0.1000']
      register: opn11
      failed_when: not opn11.failed

    - name: Adding 1 - failing because of invalid port
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        public_key: "{{ test.pub1 }}"
        allowed_ips: ['192.168.0.1/32']
        port: 70000
      register: opn12
      failed_when: not opn12.failed

    - name: Adding 1 - failing because of missing public key
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        allowed_ips: ['192.168.0.1/32']
      register: opn14
      failed_when: not opn14.failed

    - name: Adding 1 - failing because of missing allowed-ips
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
      register: opn15
      failed_when: not opn15.failed

    - name: Adding 1
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        target: 'wg.test.ansibleguy.net'
        allowed_ips: ['192.168.0.1/32']
        public_key: "{{ test.pub1 }}"
      register: opn4
      failed_when: >
        opn4.failed or
        not opn4.changed

    - name: Disabling 1
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        target: 'wg.test.ansibleguy.net'
        allowed_ips: ['192.168.0.1/32']
        public_key: "{{ test.pub1 }}"
        enabled: false
      register: opn6
      failed_when: >
        opn6.failed or
        not opn6.changed
      when: not ansible_check_mode

    - name: Disabling 1 - nothing changed
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        target: 'wg.test.ansibleguy.net'
        allowed_ips: ['192.168.0.1/32']
        public_key: "{{ test.pub1 }}"
        enabled: false
      register: opn9
      failed_when: >
        opn9.failed or
        opn9.changed
      when: not ansible_check_mode

    - name: Enabling 1
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_1'
        target: 'wg.test.ansibleguy.net'
        allowed_ips: ['192.168.0.1/32']
        public_key: "{{ test.pub1 }}"
      register: opn7
      failed_when: >
        opn7.failed or
        not opn7.changed
      when: not ansible_check_mode

    - name: Adding 2
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_2'
        target: 'wg2.test.ansibleguy.net'
        allowed_ips: ['192.168.1.1/32']
        public_key: "{{ test.pub2 }}"
        psk: "{{ test.psk }}"
        keepalive: 5
        port: 51899
      register: opn5
      failed_when: >
        opn5.failed or
        not opn5.changed

    - name: Adding 2 - nothing changed
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_2'
        target: 'wg2.test.ansibleguy.net'
        allowed_ips: ['192.168.1.1/32']
        public_key: "{{ test.pub2 }}"
        psk: "{{ test.psk }}"
        keepalive: 5
        port: 51899
      register: opn13
      failed_when: >
        opn13.failed or
        opn13.changed
      when: not ansible_check_mode

    - name: Removing 2
      ansibleguy.opnsense.wireguard_peer:
        name: 'ANSIBLE_TEST_1_2'
        state: 'absent'
      register: opn8
      failed_when: >
        opn8.failed or
        not opn8.changed
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn3
      failed_when: >
        'data' not in opn3 or
        opn3.data | length != 1
      when: not ansible_check_mode

    - name: Cleanup
      ansibleguy.opnsense.wireguard_peer:
        name: "{{ item }}"
        state: 'absent'
      loop:
        - 'ANSIBLE_TEST_1_1'
        - 'ANSIBLE_TEST_1_2'
      when: not ansible_check_mode

    - name: Listing
      ansibleguy.opnsense.list:
      register: opn2
      failed_when: >
        'data' not in opn2 or
        opn2.data | length != 0
      when: not ansible_check_mode
